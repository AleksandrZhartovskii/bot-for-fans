// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package schemas

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e8ab7adDecodeBotForFansPkgSpotifySchemas(in *jlexer.Lexer, out *Track) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "external_urls":
			easyjson3e8ab7adDecode(in, &out.ExternalURLS)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeBotForFansPkgSpotifySchemas(out *jwriter.Writer, in Track) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"external_urls\":"
		out.RawString(prefix[1:])
		easyjson3e8ab7adEncode(out, in.ExternalURLS)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Track) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeBotForFansPkgSpotifySchemas(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Track) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeBotForFansPkgSpotifySchemas(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Track) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeBotForFansPkgSpotifySchemas(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Track) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeBotForFansPkgSpotifySchemas(l, v)
}
func easyjson3e8ab7adDecode(in *jlexer.Lexer, out *struct {
	Spotify string `json:"spotify"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "spotify":
			out.Spotify = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncode(out *jwriter.Writer, in struct {
	Spotify string `json:"spotify"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"spotify\":"
		out.RawString(prefix[1:])
		out.String(string(in.Spotify))
	}
	out.RawByte('}')
}
func easyjson3e8ab7adDecodeBotForFansPkgSpotifySchemas1(in *jlexer.Lexer, out *Artist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeBotForFansPkgSpotifySchemas1(out *jwriter.Writer, in Artist) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Artist) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeBotForFansPkgSpotifySchemas1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Artist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeBotForFansPkgSpotifySchemas1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Artist) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeBotForFansPkgSpotifySchemas1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Artist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeBotForFansPkgSpotifySchemas1(l, v)
}
func easyjson3e8ab7adDecodeBotForFansPkgSpotifySchemas2(in *jlexer.Lexer, out *Album) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "release_date":
			out.ReleaseDate = string(in.String())
		case "release_date_precision":
			out.ReleaseDatePrecision = DatePrecision(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeBotForFansPkgSpotifySchemas2(out *jwriter.Writer, in Album) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"release_date\":"
		out.RawString(prefix)
		out.String(string(in.ReleaseDate))
	}
	{
		const prefix string = ",\"release_date_precision\":"
		out.RawString(prefix)
		out.String(string(in.ReleaseDatePrecision))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Album) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeBotForFansPkgSpotifySchemas2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Album) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeBotForFansPkgSpotifySchemas2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Album) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeBotForFansPkgSpotifySchemas2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Album) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeBotForFansPkgSpotifySchemas2(l, v)
}
