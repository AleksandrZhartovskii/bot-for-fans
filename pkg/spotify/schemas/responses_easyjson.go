// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package schemas

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson559270aeDecodeBotForFansPkgSpotifySchemas(in *jlexer.Lexer, out *GetSeveralAlbumsTracksResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "albums":
			if in.IsNull() {
				in.Skip()
				out.Albums = nil
			} else {
				in.Delim('[')
				if out.Albums == nil {
					if !in.IsDelim(']') {
						out.Albums = make([]struct {
							Tracks struct {
								Items []Track `json:"items"`
							} `json:"tracks"`
						}, 0, 2)
					} else {
						out.Albums = []struct {
							Tracks struct {
								Items []Track `json:"items"`
							} `json:"tracks"`
						}{}
					}
				} else {
					out.Albums = (out.Albums)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Tracks struct {
							Items []Track `json:"items"`
						} `json:"tracks"`
					}
					easyjson559270aeDecode(in, &v1)
					out.Albums = append(out.Albums, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeBotForFansPkgSpotifySchemas(out *jwriter.Writer, in GetSeveralAlbumsTracksResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"albums\":"
		out.RawString(prefix[1:])
		if in.Albums == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Albums {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson559270aeEncode(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetSeveralAlbumsTracksResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeBotForFansPkgSpotifySchemas(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetSeveralAlbumsTracksResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeBotForFansPkgSpotifySchemas(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetSeveralAlbumsTracksResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeBotForFansPkgSpotifySchemas(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetSeveralAlbumsTracksResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeBotForFansPkgSpotifySchemas(l, v)
}
func easyjson559270aeDecode(in *jlexer.Lexer, out *struct {
	Tracks struct {
		Items []Track `json:"items"`
	} `json:"tracks"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tracks":
			easyjson559270aeDecode1(in, &out.Tracks)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode(out *jwriter.Writer, in struct {
	Tracks struct {
		Items []Track `json:"items"`
	} `json:"tracks"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tracks\":"
		out.RawString(prefix[1:])
		easyjson559270aeEncode1(out, in.Tracks)
	}
	out.RawByte('}')
}
func easyjson559270aeDecode1(in *jlexer.Lexer, out *struct {
	Items []Track `json:"items"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]Track, 0, 4)
					} else {
						out.Items = []Track{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Track
					(v4).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode1(out *jwriter.Writer, in struct {
	Items []Track `json:"items"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix[1:])
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Items {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson559270aeDecodeBotForFansPkgSpotifySchemas1(in *jlexer.Lexer, out *GetArtistsByNameResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "artists":
			easyjson559270aeDecode2(in, &out.Artists)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeBotForFansPkgSpotifySchemas1(out *jwriter.Writer, in GetArtistsByNameResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"artists\":"
		out.RawString(prefix[1:])
		easyjson559270aeEncode2(out, in.Artists)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetArtistsByNameResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeBotForFansPkgSpotifySchemas1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetArtistsByNameResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeBotForFansPkgSpotifySchemas1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetArtistsByNameResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeBotForFansPkgSpotifySchemas1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetArtistsByNameResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeBotForFansPkgSpotifySchemas1(l, v)
}
func easyjson559270aeDecode2(in *jlexer.Lexer, out *struct {
	Items []Artist `json:"items"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]Artist, 0, 2)
					} else {
						out.Items = []Artist{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Artist
					(v7).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode2(out *jwriter.Writer, in struct {
	Items []Artist `json:"items"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix[1:])
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Items {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson559270aeDecodeBotForFansPkgSpotifySchemas2(in *jlexer.Lexer, out *GetArtistsAlbumsResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Albums = nil
			} else {
				in.Delim('[')
				if out.Albums == nil {
					if !in.IsDelim(']') {
						out.Albums = make([]Album, 0, 1)
					} else {
						out.Albums = []Album{}
					}
				} else {
					out.Albums = (out.Albums)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Album
					(v10).UnmarshalEasyJSON(in)
					out.Albums = append(out.Albums, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeBotForFansPkgSpotifySchemas2(out *jwriter.Writer, in GetArtistsAlbumsResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix[1:])
		if in.Albums == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Albums {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetArtistsAlbumsResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeBotForFansPkgSpotifySchemas2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetArtistsAlbumsResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeBotForFansPkgSpotifySchemas2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetArtistsAlbumsResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeBotForFansPkgSpotifySchemas2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetArtistsAlbumsResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeBotForFansPkgSpotifySchemas2(l, v)
}
func easyjson559270aeDecodeBotForFansPkgSpotifySchemas3(in *jlexer.Lexer, out *ErrorResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			easyjson559270aeDecode3(in, &out.Error)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeBotForFansPkgSpotifySchemas3(out *jwriter.Writer, in ErrorResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		easyjson559270aeEncode3(out, in.Error)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeBotForFansPkgSpotifySchemas3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeBotForFansPkgSpotifySchemas3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeBotForFansPkgSpotifySchemas3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeBotForFansPkgSpotifySchemas3(l, v)
}
func easyjson559270aeDecode3(in *jlexer.Lexer, out *struct {
	Status  int32  `json:"status"`
	Message string `json:"message"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int32(in.Int32())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode3(out *jwriter.Writer, in struct {
	Status  int32  `json:"status"`
	Message string `json:"message"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Status))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}
func easyjson559270aeDecodeBotForFansPkgSpotifySchemas4(in *jlexer.Lexer, out *ErrorAuth) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeBotForFansPkgSpotifySchemas4(out *jwriter.Writer, in ErrorAuth) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorAuth) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeBotForFansPkgSpotifySchemas4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorAuth) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeBotForFansPkgSpotifySchemas4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorAuth) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeBotForFansPkgSpotifySchemas4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorAuth) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeBotForFansPkgSpotifySchemas4(l, v)
}
func easyjson559270aeDecodeBotForFansPkgSpotifySchemas5(in *jlexer.Lexer, out *AuthResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.AccessToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeBotForFansPkgSpotifySchemas5(out *jwriter.Writer, in AuthResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeBotForFansPkgSpotifySchemas5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeBotForFansPkgSpotifySchemas5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeBotForFansPkgSpotifySchemas5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeBotForFansPkgSpotifySchemas5(l, v)
}
